@page "/EvaluationIntro/{StudyGroup:int?}"
<h3>EvaluationIntro</h3>

@switch (StudyGroup)
{
    // SEADM
    case 1:
        {
            <SEval4.Pages.Participants.EvaluationHelpers.ScenariosSeadmIntro />
        }
        break;

    // Feedback
    case 2:
        {
            <SEval4.Pages.Participants.EvaluationHelpers.ScenariosFeedbackIntro />
        }
        break;

    default:
        {
            <h3>Critical error</h3>
        }
        break;
}
<b>@ErrorMsg</b>
@code {

    public string ErrorMsg = string.Empty;

    #region Study group

    [Parameter]
    public int? StudyGroup { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // TODO: Check that StudyGroup matches an ID of a study group

        await base.OnParametersSetAsync();
    }

    #endregion

    #region User Guid

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || UserGuid.Equals(Guid.Empty))
        {
            Guid? guid = await Storage.GetUserGuidOrNullAsync();

            if (guid.HasValue)
            {
                UserGuid = guid.Value;
            }
            else
            {
                // TODO
                ErrorMsg = "No guid";
                //NavigationManager.NavigateTo("Introduction");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    //#region Get StudyGroupID

    //private async Task<int?> TryGetStudyGroupIdAsync()
    //{
    //    // Try to get from the SessionStorage
    //    //int? studyGroup = await Storage.GetStudyGroupAsync();

    //    //// If not found int he SessionStorage, try to fetch from database
    //    //if (studyGroup is null)
    //    //{
    //    int? studyGroup = await SurveyService
    //        .GetUserAllocationGroupAsync(UserGuid);
    //    //}

    //    return studyGroup;
    //}

    //#endregion

}
