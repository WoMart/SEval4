@page "/EvaluationIntro/{StudyGroupId:guid?}"
@using SEval4.Models

<div id="evaluationIntro">

    @switch (StudyGroup?.Name)
    {
        // SEADM
        case "SEADM":
            {
                <div id="seadmIntro">

                    <h1>Detection model group</h1>
                    <hr />

                    <p>
                        You have been allocated to the study group with feedback.
                        In the next page you will be faced with one scenario at a time.
                        Similarly to the previous scenarios, take as much time as you need to read and understand the scenario and the responses.
                        If your answer was incorrect, the scenario will be displayed again later until the correct answer is selected.
                        All scenarios must be answered correctly to finish the training.
                        </p>
                    </div>
            }
            break;

        // Feedback
        case "Feedback":
            {
                <FeedbackInformation />
            }
            break;

        default:
            {
                <h3>System did not recognise the allocated study group.</h3>
            }
            break;
    }

    @if (StudyGroupId.HasValue)
    {
        <div>
            <button class="btn btn-primary" @onclick="Continue">
                Continue
            </button>
        </div>
    }
    else
    {
        <a href="introduction">Go to start...</a>
    }

    <b>@ErrorMsg</b>
</div>

@code {

    public string ErrorMsg = string.Empty;

    #region Study group

    [Parameter]
    public Guid? StudyGroupId { get; set; }

    public StudyGroup StudyGroup { get; set; }

    private List<StudyGroup> StudyGroups = new();

    protected override async Task OnParametersSetAsync()
    {
        if (!StudyGroupId.HasValue)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Given parameter is not a guid.");
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        StudyGroups = await SurveyService.GetStudyGroupsAsync();
        StudyGroup  = StudyGroups.First(sg => sg.Identifier == StudyGroupId);
    }

    #endregion

    #region User Guid

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || UserGuid.Equals(Guid.Empty))
        {
            Guid? guid = await Storage.GetUserGuidOrNullAsync();

            if (guid.HasValue)
            {
                UserGuid = guid.Value;
            }
            else
            {
                // TODO
                //NavigationManager.NavigateTo("Introduction");
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: No guid in the SessionStorage.");
            }

            if (!StudyGroupId.HasValue || !StudyGroups.Any(sg => sg.Identifier == StudyGroupId.Value))
            {
                // TODO: Navigate to an error page explaining what's wrong
                //NavigationManager.NavigateTo("InvalidStudy");
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: Invalid study number.");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    #region Continue

    private void Continue()
    {
        NavigationManager.NavigateTo($"Evaluation/{StudyGroupId}");
    }

    #endregion

}
