@page "/Evaluation/{StudyGroupId:guid?}"
@using SEval4.Models;

<div id="evaluation">

    <h3>Evaluation</h3>

    <EditForm Model="Answer"
              OnInvalidSubmit="@( async () => await SubmitSingleAnswer(false) )"
              OnValidSubmit="@(   async () => await SubmitSingleAnswer(true) )">
        <div style="margin-bottom:1px; border:double; border-width:2px; padding:10px;">
            <div>
                <p>
                    <label for="@($"scenario{CurrentScenario.Id.ToString()}")">
                        <b>@CurrentScenario.Context</b>
                    </label>
                </p>
            </div>
        </div>
        <div style="margin-bottom:20px; border:double; border-width:2px; padding:10px;">
            <table>
                <tbody>
                    <tr>
                        <td style="vertical-align: top;"
                            width="@(StudyGroup?.Name == "SEADM" ? "70%" : "100%")">
                            <div id="responses" style="padding: 5px;">

                                <div style="vertical-align: top;">
                                    <InputRadioGroup @bind-Value="@Answer.ResponseId" Name="response">
                                        @foreach (EvalResponse response in Responses.Where(
                                          r => r.ScenarioId == CurrentScenario.Id))
                                        {
                                            <div style="margin-bottom:5px;">
                                                <CustomRadio name="@($"response")"
                                                             SelectedValue="response.Id"
                                                             OptionText="@response.Text"
                                                             @bind-Value="Answer.ResponseId" />
                                            </div>
                                        }
                                    </InputRadioGroup>
                                </div>
                            </div>

                        </td>
                        @* SEADM *@
                        @if (StudyGroup?.Name == "SEADM")
                        {
                            <td width="30%">
                                <SeadmForm />
                            </td>
                        }
                    </tr>
                </tbody>
            </table>

            
            </div>

        <div>
            <button class="btn btn-primary" type="submit">Continue</button>
            <label class="alert text-danger">@ErrorMsg</label>
        </div>
        <div class="alert">
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
        </div>
    </EditForm>

</div>

@code {
    private string ErrorMsg = string.Empty;

    #region Database fetch

    #region Study groups

    [Parameter]
    public Guid? StudyGroupId { get; set; }

    private StudyGroup StudyGroup { get; set; } = new();

    private List<StudyGroup> StudyGroups = new();

    #endregion

    #region Evaluation

    private List<EvalScenario> Scenarios = new();
    private List<EvalResponse> Responses = new();
    private EvalScenario CurrentScenario = new();

    #endregion

    protected override async Task OnParametersSetAsync()
    {
        if (!StudyGroupId.HasValue)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Given parameter is not a guid.");
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        StudyGroups = await SurveyService.GetStudyGroupsAsync();
        Scenarios = await SurveyService.GetEvaluationRoundsAsync(isRandomOrder: true);
        Responses = await SurveyService.GetEvaluationResponsesAsync(isRandomOrder: true);

        StudyGroup = StudyGroups.FirstOrDefault(sg => sg.Identifier == StudyGroupId);

        if (StudyGroup is null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "DEBUG: Invalid study number.");
            NavigationManager.NavigateTo("Error");

        }

        // Initialise current scenario
        CurrentScenario = GetNextScenario();

        await base.OnInitializedAsync();
    }

    #endregion

    #region User guid and setup

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || UserGuid.Equals(Guid.Empty))
        {
            Guid? guid = await Storage.GetUserGuidOrNullAsync();

            if (guid.HasValue)
            {
                UserGuid = guid.Value;
            }
            else
            {
                NavigationManager.NavigateTo("Introduction");
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: No guid in the SessionStorage.");
            }

            if (!StudyGroupId.HasValue || !StudyGroups.Any(sg => sg.Identifier == StudyGroupId))
            {
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: Invalid study number.");
                NavigationManager.NavigateTo("Error");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    #region Answers

    private EvalAnswer Answer { get; set; } = new();

    private EvalScenario GetNextScenario()
    {
        // Clear the answer model
        Answer = new();

        // Get the next different scenario or null
        var sc = Scenarios.FirstOrDefault(s =>
            !s.IsAnsweredCorrectly &&
            !s.Equals(CurrentScenario));

        // If null, there's only one scenario left
        return sc ?? CurrentScenario;
    }

    private bool IsAnswerCorrect()
    {
        var response = Responses
            .First(r => r.Id== Answer.ResponseId &&
            r.ScenarioId == CurrentScenario.Id);
        return response.IsCorrect;
    }

    private async Task SubmitSingleAnswer(bool isValid)
    {
        if (isValid)
        {
            bool isCorrect = IsAnswerCorrect();

            // Try insert
            if (await InsertAnswerAsync(isCorrect))
            {
                // Record if answer is correct locally
                // Do it after the insert to keep the "synchronised"
                CurrentScenario.IsAnsweredCorrectly = isCorrect;

                string incorrectAnswerMessage = "Incorrect!";
                if (StudyGroup.Name == "Feedback")
                {
                    incorrectAnswerMessage += $"\n{CurrentScenario.Feedback}";
                }

                // Display small feedback
                string message = isCorrect ? "Correct!" : incorrectAnswerMessage;
                await JsRuntime.InvokeVoidAsync("alert", message);

                // If last scenario, continue; next scenario otherwise
                if (Scenarios.All(s => s.IsAnsweredCorrectly))
                {
                    if (await SumAttemptsPerScenario())
                    {
                        //await JsRuntime.InvokeVoidAsync("alert", "Here we navigate to results");
                        NavigationManager.NavigateTo("PostgameIntro");

                    }
                    else
                    {
                        ErrorMsg = "Failed to sum and record number of attempts.";
                    }
                }
                else
                {
                    // Reset answer model and get next scenario
                    CurrentScenario = GetNextScenario();
                }
            }
            else
            {
                // Notify if insert failed
                ErrorMsg = "Server failed to upload your answer. Try again?";
            }
        }
        else
        {
            // Notify if invalid
            ErrorMsg = "Choose a response.";
        }

        await Task.CompletedTask;
    }

    private async Task<bool> InsertAnswerAsync(bool? isCorrect = null)
    {
        Answer.UserId = UserGuid;
        Answer.CreateTime = DateTime.Now;
        Answer.ScenarioId = CurrentScenario.Id;
        Answer.IsCorrect = isCorrect ?? IsAnswerCorrect();

        try
        {
            int rowsAffected = await SurveyService
                .InsertEvaluationAnswerAsync(Answer);

            if (rowsAffected == 0)
            {
                throw new Exception();
            }

            return true;
        }
        catch
        {
            return false;
        }
    }

    private async Task<bool> SumAttemptsPerScenario()
    {
        try
        {
            int rowsAffected = await SurveyService
                .SumAndRecordAttemptsPerScenarioAsync(UserGuid);

            if (rowsAffected != Scenarios.Count)
            {
                throw new Exception();
            }

            return true;
        }
        catch
        {
            return false;
        }

    }

    #endregion
}
