@page "/Evaluation/{StudyGroupId:guid?}"
@using SEval4.Models;

<div id="evaluation">

    <h3>Evaluation</h3>

    <div style="margin-bottom:20px; border:double; border-width:2px; padding:10px;">
        <div>
            <p>
                <label for="@($"scenario{CurrentScenario.ScenarioId.ToString()}")">
                    <b>@CurrentScenario.Context</b>
                </label>
            </p>
        </div>
    </div>

    <div id="responses">
        @foreach (EvalResponse response in Responses.Where(
            r => r.ScenarioId == CurrentScenario.ScenarioId))
        {
            <p>@response.Text</p>
        }
    </div>

    @* Study group specific elements *@
    @switch (StudyGroups.FirstOrDefault(sg => sg.Id == StudyGroupId.Value)?.Name)
    {
        case "SEADM":
            {
                <div id="seadmForm">

                </div>

            }
            break;
        case "Feedback":
            {
                <div id="feedbackWindow">

                </div>
            }
            break;

        default:
            break;
    }


    <b>@ErrorMsg</b>
</div>

@code {

    private string ErrorMsg = string.Empty;

    #region Database fetch

    #region Study groups

    [Parameter]
    public Guid? StudyGroupId { get; set; }

    private StudyGroup StudyGroup { get; set; } = new();

    private List<StudyGroup> StudyGroups = new();

    #endregion

    #region Evaluation

    private List<EvalScenario> Scenarios = new();
    private List<EvalResponse> Responses = new();
    private EvalScenario CurrentScenario = new();

    #endregion

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //StudyGroup = new Guid(studyGroup);
        }
        catch
        {
            // TODO
            await JsRuntime.InvokeVoidAsync("alert", "Given parameter is not a guid.");
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        StudyGroups = await SurveyService.GetStudyGroupsAsync();
        Scenarios   = await SurveyService.GetEvaluationRoundsAsync(isRandomOrder: true);
        Responses   = await SurveyService.GetEvaluationResponsesAsync(isRandomOrder: true);

        StudyGroup = StudyGroups.First(sg => sg.Id == StudyGroupId);

        // Initialise current scenario
        CurrentScenario = GetNextScenario();

        await base.OnInitializedAsync();
    }

    #endregion

    #region User guid and setup

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || UserGuid.Equals(Guid.Empty))
        {
            Guid? guid = await Storage.GetUserGuidOrNullAsync();

            if (guid.HasValue)
            {
                UserGuid = guid.Value;
            }
            else
            {
                // TODO
                //NavigationManager.NavigateTo("Introduction");
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: No guid in the SessionStorage.");
            }

            if (!StudyGroupId.HasValue || !StudyGroups.Any(sg => sg.Id == StudyGroupId))
            {
                // TODO: Navigate to an error page explaining what's wrong
                //NavigationManager.NavigateTo("InvalidStudy");#
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: Invalid study number.");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    private EvalScenario GetNextScenario()
    {
        return Scenarios.FirstOrDefault(s =>
            !s.IsAnsweredCorrectly &&
            !s.Equals(CurrentScenario));
    }
}
