@page "/Evaluation/{StudyGroupId:guid?}"
@using SEval4.Models;

<div id="evaluation">

    <h3>Evaluation</h3>

    <EditForm Model="Answer" 
              OnInvalidSubmit="@( async () => await SubmitSingleAnswer(false) )"
              OnValidSubmit="@(   async () => await SubmitSingleAnswer(true) )">
        <div style="margin-bottom:20px; border:double; border-width:2px; padding:10px;">
            <div>
                <p>
                    <label for="@($"scenario{CurrentScenario.ScenarioId.ToString()}")">
                        <b>@CurrentScenario.Context</b>
                    </label>
                </p>
            </div>
        </div>

        <div id="responses">
            <InputRadioGroup @bind-Value="@Answer.ResponseValue" Name="response">
                @foreach (EvalResponse response in Responses.Where(
r => r.ScenarioId == CurrentScenario.ScenarioId))
                {
                    @* InputRadio doesn't work well at all, use Custom solution *@
                    <CustomRadio name="@($"response")"
                                 SelectedValue="response.Value"
                                 @bind-Value="Answer.ResponseValue" />
                    @response.Text <br />
                }

            </InputRadioGroup>
        </div>

        <div>
            <button class="btn btn-primary" type="submit">Continue</button>
            <label class="alert text-danger">@ErrorMsg</label>
        </div>
        <div class="alert">
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
        </div>
    </EditForm>


    @* Study group specific elements *@
    @switch (StudyGroups.FirstOrDefault(sg => sg.Id == StudyGroupId.Value)?.Name)
    {
        case "SEADM":
            {
                <div id="seadmForm">

                </div>

            }
            break;
        case "Feedback":
            {
                <div id="feedbackWindow">

                </div>
            }
            break;

        default:
            break;
    }

</div>

@code {

    private string ErrorMsg = string.Empty;

    #region Database fetch

    #region Study groups

    [Parameter]
    public Guid? StudyGroupId { get; set; }

    private StudyGroup StudyGroup { get; set; } = new();

    private List<StudyGroup> StudyGroups = new();

    #endregion

    #region Evaluation

    private List<EvalScenario> Scenarios = new();
    private List<EvalResponse> Responses = new();
    private EvalScenario CurrentScenario = new();

    #endregion

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //StudyGroup = new Guid(studyGroup);
        }
        catch
        {
            // TODO
            await JsRuntime.InvokeVoidAsync("alert", "Given parameter is not a guid.");
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        StudyGroups = await SurveyService.GetStudyGroupsAsync();
        Scenarios = await SurveyService.GetEvaluationRoundsAsync(isRandomOrder: true);
        Responses = await SurveyService.GetEvaluationResponsesAsync(isRandomOrder: true);

        StudyGroup = StudyGroups.First(sg => sg.Id == StudyGroupId);

        // Initialise current scenario
        CurrentScenario = GetNextScenario();

        await base.OnInitializedAsync();
    }

    #endregion

    #region User guid and setup

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || UserGuid.Equals(Guid.Empty))
        {
            Guid? guid = await Storage.GetUserGuidOrNullAsync();

            if (guid.HasValue)
            {
                UserGuid = guid.Value;
            }
            else
            {
                // TODO
                //NavigationManager.NavigateTo("Introduction");
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: No guid in the SessionStorage.");
            }

            if (!StudyGroupId.HasValue || !StudyGroups.Any(sg => sg.Id == StudyGroupId))
            {
                // TODO: Navigate to an error page explaining what's wrong
                //NavigationManager.NavigateTo("InvalidStudy");#
                await JsRuntime.InvokeVoidAsync("alert", "DEBUG: Invalid study number.");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    private EvalScenario GetNextScenario()
    {
        return Scenarios.FirstOrDefault(s =>
            !s.IsAnsweredCorrectly &&
            !s.Equals(CurrentScenario));
    }

    private AnswerEvaluation Answer { get; set; } = new();

    private async Task SubmitSingleAnswer(bool isValid)
    {
        CurrentScenario.IsAnsweredCorrectly = isValid;

        if (!isValid)
        {
            // Notify if invalid
            ErrorMsg = "Did you choose a response?";
        }
        else if (!await InsertAnswerAsync())
        {
            // Try insert and notify if failed
            ErrorMsg = $"Server failed to upload your answer. Try again?";
        }
        else if (Scenarios.All(s => s.IsAnsweredCorrectly))
        {
            // If all scenarios are completed, continue
            await JsRuntime.InvokeVoidAsync("alert", "Here we navigate to results");
        }
        else
        {
            // Reset answer model and get next scenario
            Answer = new();
            CurrentScenario = GetNextScenario();
        }

        await Task.CompletedTask;
    }

    private async Task<bool> InsertAnswerAsync()
    {
        Answer.UserId = UserGuid;
        Answer.InsertTime = DateTime.Now;
        Answer.ScenarioId = CurrentScenario.ScenarioId;
        Answer.IsCorrect = Responses
            .First(r => r.ScenarioId == CurrentScenario.ScenarioId)
            .IsCorrect;

        try
        {
            int rowsAffected = await SurveyService
                .InsertEvaluationAnswerAsync(Answer);

            if (rowsAffected == 0)
            {
                throw new Exception();
            }

            return true;
        }
        catch
        {
            return false;
        }
    }


}
