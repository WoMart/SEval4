@page "/Feedback"
@using SEval4.Models

<div id="feedbackSurvey">

    <h3>Feedback</h3>
    <hr />

    <div id="form">
        <EditForm Model="@ParticipantFeedback"
                  OnValidSubmit="@(async () => await Submit(true))"
                  OnInvalidSubmit="@(async () => await Submit(false))">

            <p>
                <label>
                    <b>Did you find the training in this study helpful?</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantFeedback.StudyHelpfulness">
                    <option value="" selected></option>
                    @foreach (var option in this.StudyHelpfulness)
                    {
                        <option value="@option.Text">@option.Text</option>
                    }
                </InputSelect>
            </p>

            <p>
                <label>
                    <b>How has the training affected your confidence in detecting phishing attacks?</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantFeedback.PhishingConfidenceChange">
                    <option value="" selected></option>
                    @foreach (var option in this.ConfidenceChange)
                    {
                        <option value="@option.Text">@option.Text</option>
                    }
                </InputSelect>
            </p>

            <p>
                <label>
                    <b>How has the training affected your confidence in detecting spear-phishing attacks?</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantFeedback.SpearPhishingConfidenceChange">
                    <option value="" selected></option>
                    @foreach (var option in this.ConfidenceChange)
                    {
                        <option value="@option.Text">@option.Text</option>
                    }
                </InputSelect>
            </p>

            <p>
                <label>
                    <b>Do you have any feedback (criticism, improvement ideas, etc.) regarding the scenarios presented during the study? (Leave empty if none)</b>
                </label>
                <InputTextArea class="form-control" @bind-Value="ParticipantFeedback.ScenarioFeedback" />
            </p>

            <p>
                <label>
                    <b>Do you have any feedback regarding the training method you have been allocated to? (Leave empty if none)</b>
                </label>
                <InputTextArea class="form-control" @bind-Value="ParticipantFeedback.TrainingFeedback" />
            </p>

            <p>
                <label>
                    <b>Lastly, do you have any other feedback regarding the whole study or the website? (Leave empty if none)</b>
                </label>
                <InputTextArea class="form-control" @bind-Value="ParticipantFeedback.GeneralFeedback" />
            </p>

            <div>
                <button class="btn btn-primary" type="submit">Continue</button>
                <label class="alert text-danger">@ErrorMsg</label>
            </div>
            <div class="alert">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
            </div>
        </EditForm>

    </div>

</div>

@code {

    #region Fetch options

    private List<StudyHelpfulness> StudyHelpfulness = new();
    private List<ConfidenceChange> ConfidenceChange = new();

    protected override async Task OnInitializedAsync()
    {
        StudyHelpfulness = await SurveyService.GetStudyHelpfulnessAsync();
        ConfidenceChange = await SurveyService.GetConfidenceChangeAsync();

        await base.OnInitializedAsync();
    }

    #endregion

    #region User Guid

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || UserGuid.Equals(Guid.Empty))
        {
            Guid? guid = await Storage.GetUserGuidOrNullAsync();

            if (guid is null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                UserGuid = guid.Value;
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    #region Submit and continue

    private ParticipantFeedback ParticipantFeedback = new();
    private string ErrorMsg = string.Empty;
    private bool IsBusy = false;

    private async Task Submit(bool isValid)
    {
        ErrorMsg = string.Empty;

        // One message for any missing field
        if (!isValid)
        {
            ErrorMsg = "All fields are required.";
            return;
        }

        if (IsBusy)
        {
            ErrorMsg = "Did you just double click me?";
            return;
        }

        IsBusy = true;

        try
        {
            ParticipantFeedback.UserId = UserGuid;

            // Submit the feedback
            await SurveyService.SubmitParticipantFeedbackAsync(ParticipantFeedback);

            // Update the IsFinished column
            await SurveyService.RecordParticipantFinishedStudy(UserGuid);

            NavigationManager.NavigateTo("Thanks");

        }
        catch (DbUpdateException)
        {
            ErrorMsg = "The database believes you have already completed this form before. Cannot continue...";
            throw;
        }
        catch (Exception ex)
        {
            // Do some magic
            ErrorMsg = ex.InnerException.Message;
            throw;
        }
        finally
        {
            IsBusy = false;
        }

        await Task.CompletedTask;
    }

    #endregion
}
