@page "/Baseline"
@using SEval4.Models

<div id="scenarioSurvey">
    <h1>BaselineSurvey</h1>
    <div id="form">
        <p>

        </p>

        <EditForm Model="@Answers">

            @foreach (var answer in Answers)
            {
                var scenario  = Scenarios.Single(s => s.ScenarioId == answer.ScenarioId);
                var responses = Responses.Where(r  => r.ScenarioId == answer.ScenarioId)
                    .ToList();

                <p>
                    <label for="@($"scenario{scenario.ScenarioId.ToString()}")">
                        <b>@scenario.Context</b>
                    </label>
                </p>
                <InputSelect class="form-control" @bind-Value="answer.Value">
                    <option value=""></option>

                    @foreach (Response resp in responses)
                    {
                        <option value="@resp.Value">@resp.Text</option>
                    }
                </InputSelect>
            }

            <div>
                <button class="btn btn-primary" type="submit">Continue</button>
                <label class="alert text-danger"></label>
            </div>
        </EditForm>
    </div>
</div>

@code {

    #region User Guid

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Guid? guid = await Storage.GetUserGuidOrNullAsync();

        if (guid != null)
        {
            UserGuid = guid.Value;
        }
        else
        {
            NavigationManager.NavigateTo("Introduction");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    private List<Scenario> Scenarios = new();
    private List<Response> Responses = new();
    private List<BaselineFormAnswer> Answers = new();

    protected override async Task OnInitializedAsync()
    {
        Scenarios = await SurveyService.GetBaselineScenariosAsync(isRandomOrder: true);
        Responses = await SurveyService.GetBaselineResponsesAsync(isRandomOrder: true);

        // Create models for answers
        for (int i = 0; i < Scenarios.Count; i++)
        {
            Answers.Add(new BaselineFormAnswer
            {
                ScenarioId = Scenarios[i].ScenarioId,
            });
        }

        await base.OnInitializedAsync();
    }


}

@*


    //private List<ScenarioResponse> Responses { get; set; } = new();

    private List<ScenarioTest> Scenarios { get; set; } = new();

    private ParticipantBaseline ParticipantBaseline { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        //using var context = DbFactory.CreateDbContext();

        //// Fetch Scenarios and shuffle their order
        //// Must be Enumarable for LINQ to correctly translate the OrderBy query
        //var scenarios = context.Scenarios
        //    .AsEnumerable()
        //    .OrderBy(s => Guid.NewGuid());

        //foreach (Scenario scenario in scenarios)
        //{
        //    ScenarioTest newScenario = new(scenario);
        //    newScenario.Responses = context.ScenarioResponses
        //        .AsEnumerable()
        //        .Where(sr => sr.ScenarioId == newScenario.ScenarioId)
        //        .OrderBy(s => Guid.NewGuid())
        //        .ToList();
        //    Scenarios.Add(newScenario);
        //}

        // TODO

        await base.OnParametersSetAsync();
    }

    private Task OnValueChanged(ScenarioTest scenario, string value)
    {

        return Task.CompletedTask;
    }
*@