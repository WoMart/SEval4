@page "/Survey"
@inject IDbContextFactory<SurveyContext> DbFactory
@using SEval4.Models

<div id="survey">
    <h3>Survey</h3>
    <div id="form">
        <EditForm Model="@ParticipantSurvey" 
                  OnValidSubmit="@(async () => await Submit(true))" 
                  OnInvalidSubmit="@(async () => await Submit(false))">

            @* AGE GROUP *@
            <p>
                <label>
                    <b>Please indicate your age.</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.AgeGroup">
                    <option value="" selected>--</option>
                    @foreach (var option in this.AgeGroups)
                    {
                        <option value="@option.Value">@option.Text</option>
                    }
                </InputSelect>
            </p>

            @* EDUCATION *@
            <p>
                <label>
                    <b>What is your highest level of education?</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.EducationGroup">
                    <option value="" selected>--</option>
                    @foreach (var option in this.EducationGroups)
                    {
                        <option value="@option.Value">@option.Text</option>
                    }
                </InputSelect>
            </p>

            @* PROFESSIONAL EXPERIENCE *@
            <p>
                <label>
                    <b>
                        How many years of experience do you have using email, telephone,
                        paper mail etc. within a professional organisation context?
                        e.g. office work involving email communication with clients
                        or other employees of the organisation
                    </b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.ProfessionalExperience">
                    <option value="" selected>--</option>
                    @foreach (var option in this.YearGroups)
                    {
                        <option value="@option.Value">@option.Text</option>
                    }
                </InputSelect>
            </p>

            @* FORMAL TRAINING *@
            <p>
                <label>
                    <b>
                        Have you undertaken any formal or professional training related to
                        safe email, telephone, paper mail etc. usage including how to identify
                        potential phishing emails and how to respond correctly?
                    </b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.HasFormalTraining">
                    <option value="" selected>--</option>
                    <option value="2">Yes</option>
                    <option value="1">No</option>
                </InputSelect>
            </p>

            @* INFORMAL TRAINING *@
            <p>
                <label>
                    <b>
                        Have you undertaken any self-training (informal) related to safe email,
                        telephone, paper mail etc. usage or actively sought to discover
                        any information that may help you to better identify potential
                        phishing emails and respond correctly? e.g. reviewing recommended security
                        advice on how to identify phishing emails?
                    </b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.HasInformalTraining">
                    <option value="" selected>--</option>
                    <option value="2">Yes</option>
                    <option value="1">No</option>
                </InputSelect>
            </p>

            <p>
                <label>
                    <b>Indicate your confidence in detecting phishing attacks received by email, telephone, paper maile etc.</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.PhishingConfidence">
                    <option value="" selected>--</option>
                    @foreach (var opt in this.ConfidenceGroups)
                    {
                        <option value="@opt.Value">@opt.Text</option>
                    }
                </InputSelect>
            </p>

            <p>
                <label>
                    <b>Indicate your confidence in detecting a deception attempt in active correspondence.</b>
                </label>
                <InputSelect class="form-control" @bind-Value="ParticipantSurvey.HumanConfidence">
                    <option value="" selected>--</option>
                    @foreach (var opt in this.ConfidenceGroups)
                    {
                        <option value="@opt.Value">@opt.Text</option>
                    }
                </InputSelect>
            </p>

            <div>
                <button class="btn btn-primary" type="submit">Continue</button>
                <label class="alert text-danger">@ErrorMsg</label>
            </div>
            <div class="alert">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
            </div>
        </EditForm>

    </div>

</div>


@code
{
    #region Input Options

    private List<AgeGroup> AgeGroups { get; set; }

    private List<YearGroup> YearGroups { get; set; }

    private List<EducationGroup> EducationGroups { get; set; }

    private List<ConfidenceGroup> ConfidenceGroups { get; set; }

    #endregion

    private string ErrorMsg { get; set; } = string.Empty;

    private Guid UserGuid { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Guid? guid = await Storage.GetUserGuidOrNullAsync();

        if (guid != null)
        {
            UserGuid = guid.Value;
        }
        else
        {
            NavigationManager.NavigateTo("Introduction");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        await GetOptions();
        await base.OnParametersSetAsync();
    }

    private ParticipantSurvey ParticipantSurvey = new ParticipantSurvey();

    private bool Busy { get; set; }

    #region Private methods

    private async Task Submit(bool isValid)
    {
        ErrorMsg = string.Empty;

        // I don't need a separate message for each field
        if (!isValid)
        {
            ErrorMsg = "All fields are required.";
            return;
        }

        if (Busy)
        {
            ErrorMsg = "Processing update... try again.";
            return;
        }

        Busy = true;

        ParticipantSurvey.Id = UserGuid;

        using var context = DbFactory.CreateDbContext();
        context.ParticipantSurveys.Add(ParticipantSurvey);

        try
        {
            await context.SaveChangesAsync();

        }
        catch (DbUpdateException)
        {
            ErrorMsg = "The database believes you have already completed this form before. Cannot continue...";
            throw;
        }
        catch (Exception ex)
        {
            // Do some magic
            ErrorMsg = ex.InnerException.Message;
            throw;
        }
        finally
        {
            Busy = false;
        }

    }

    private async Task GetOptions()
    {
        using var context = DbFactory.CreateDbContext();

        AgeGroups        = await context.AgeGroups.ToListAsync();
        YearGroups       = await context.YearGroups.ToListAsync();
        EducationGroups  = await context.EducationGroups.ToListAsync();
        ConfidenceGroups = await context.ConfidenceGroups.ToListAsync();
    }

    #endregion
}
